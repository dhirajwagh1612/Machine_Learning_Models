TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
mean(c(2, 4, 5))
mean(c(2, 4, 5))
mean(c(2, 4, 5, NA))
Sys.Date()
mean(c(2, 5, 5))
mean(c(2, 4, 5))
submit()
submit()
boring_function('my first function!')
boring_function('My first function!')
mean(c(2, 4, 5, NA), na.rm = TRUE)
swirl()
submit(x)
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
mean(c(2, 4, 5, NA))
do.something()
ls
data()
as.matrix()
as
det(a)
x=(9,2,10 10,20,30 40,50,60)
x=(9 2 10 10, 20 30, 40 50 60)
x=(9 2 10, 20 30 40, 40 50 60)
y=x=(9 2 10, 20 30 40, 40 50 60)
int[1:9]
y=int[1:9]
y=[1:9]
install.packages(warbleR)
# create regreesor here.
install.packages('randomForest')
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/Support Vector Machine SVM/')
setwd("~/")
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/Support Vector Machine SVM/')
install.packages('e1070')
#fitting  SVM to the training set
#install.packages('e1070')
library(e1070)
#fitting  SVM to the training set
#install.packages('e1070')
library(e1071)
#fitting  SVM to the training set
install.packages('e1071')
#fitting  SVM to the training set
install.packages('e1071')
install.packages("e1071")
#fitting  SVM to the training set
#install.packages('e1071')
library(e1071)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
library(e1071)
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-Classification',
kernel = 'linear')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-Classification',
kernel = 'linear')
# predecting a new result.
y_pred = predict(regressor, data.frame(level = 6.5))
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/Support Vector Machine SVM/')
#SVM
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-Classification',
kernel = 'linear')
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
prob_pred = predict(classifier, newdata = test_set[-3])
#Making the confusion matrix.
cm = table(test_set[, 3], y_pred)
#visualization of logistic regression.
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/Support Vector Machine SVM/')
#SVM
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-Classification',
kernel = 'linear')
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
prob_pred = predict(classifier, newdata = test_set[-3])
#Making the confusion matrix.
cm = table(test_set[, 3], y_pred)
#visualization of logistic regression.
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/Support Vector Machine SVM/')
#SVM
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-Classification',
kernel = 'linear')
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
prob_pred = predict(classifier, newdata = test_set[-3])
#Making the confusion matrix.
cm = table(test_set[, 3], y_pred)
#visualization of logistic regression.
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/Kernal SVM//')
#fitting  SVM to the training set
#install.packages('e1071')
library('e1071')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-Classification',
kernel = 'linear')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-classification',
kernel = 'linear')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library('e1071')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-classification',
kernel = 'linear')
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library('e1071')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-classification',
kernel = 'radial')
View(dataset)
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/kernal SVM/')
#Kernal SVM
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library('e1071')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-classification',
kernel = 'radial')
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
prob_pred = predict(classifier, newdata = test_set[-3])
#Making the confusion matrix.
cm = table(test_set[, 3], y_pred)
#visualization of logistic regression.
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernal SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernal SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/kernal SVM/')
#Kernal SVM
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library('e1071')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-classification',
kernel = 'radial')
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
prob_pred = predict(classifier, newdata = test_set[-3])
#Making the confusion matrix.
cm = table(test_set[, 3], y_pred)
#visualization of logistic regression.
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernal SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernal SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('F:/Projects/Machine Learning/ML/Machine_Learning_Models/Classification/kernal SVM/')
#Kernal SVM
# loading dataset.
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#spliting dataset into test and train.
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#feature scaling.
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
#fitting  SVM to the training set
#install.packages('e1071')
library('e1071')
classifier = svm(formula = Purchased ~.,
data =  training_set,
type = 'C-classification',
kernel = 'radial')
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
prob_pred = predict(classifier, newdata = test_set[-3])
#Making the confusion matrix.
cm = table(test_set[, 3], y_pred)
#visualization of logistic regression.
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernal SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Kernal SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
